{"version":3,"sources":["components/FilterBar.js","components/Header.js","components/Footer.js","components/CharacterList.js","components/CharacterDetail.js","App.js","serviceWorker.js","index.js"],"names":["FilterBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSearchChange","event","setState","searchQuery","target","value","handleFormSubmit","preventDefault","onFilterSubmit","state","react_default","a","createElement","className","onSubmit","htmlFor","type","placeholder","id","onChange","Component","Header","title","message","src_components_FilterBar","Footer","CharacterList","characters","fetchCharacters","prevProps","prevState","axios","get","params","apikey","limit","nameStartsWith","charactersData","data","results","console","log","_context","t0","_this2","characterList","map","character","index","key","concat","onClick","onSelectedCharacterChange","alt","src","thumbnail","path","extension","name","length","renderCharacters","renderEmptyState","CharacterDetail","selectedCharacter","selectedCharacterId","fetchCharacterDetails","wikiUrl","urls","find","url","description","href","rel","renderCharacterDetails","App","charId","src_components_Header","src_components_CharacterList","src_components_CharacterDetail","components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.78cede0e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport \"./FilterBar.scss\";\n\nclass FilterBar extends Component {\n\tconstructor(props) {\n\t  super(props);\n\t  this.state = {\n\t    searchQuery: ''\n\t  }\n\t}\n\n\thandleSearchChange = (event) => {\n\t  this.setState({ \n\t    searchQuery: event.target.value\n\t  });\n\t}\n\n\thandleFormSubmit = (event) => {\n\t\tevent.preventDefault();\n\t\tthis.props.onFilterSubmit(this.state.searchQuery);\n\t}\n\n\trender(){\n\t\treturn (\n\t\t\t<div className=\"FilterBar__Component\">\n\t\t\t\t<form onSubmit={this.handleFormSubmit}>\n\t\t\t\t  <label className=\"visually-hidden\" htmlFor=\"search\">\n\t\t\t\t    Search Characters:\n\t\t\t\t  </label>\n\t\t\t\t  <input \n\t\t\t\t  \ttype=\"text\" \n\t\t\t\t  \tplaceholder=\"Search characters\" \n\t\t\t\t  \tid=\"search\"\n\t\t\t\t  \tvalue={this.state.searchQuery} \n\t\t\t  \t\tonChange={this.handleSearchChange}\n\t\t\t\t  />\n\t\t\t\t  <button type=\"submit\">Submit</button>\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t);\n\t}\n};\n\nexport default FilterBar;\n","import React from 'react';\nimport FilterBar from './FilterBar';\nimport './Header.scss';\n\nconst Header = (props) => {\n\treturn (\n\t\t<header className=\"Header__Component\">\n\t\t\t<h1>{props.title}</h1>\n\t\t\t<p>{props.message}</p>\n\t\t\t<FilterBar onFilterSubmit={props.onFilterSubmit} />\n\t\t</header>\n\t);\t\n};\n\nexport default Header;\n\n","import React from 'react';\nimport './Footer.scss';\n\nfunction Footer(props) {\n\treturn (<footer className=\"Footer__Component\">Data provided by Marvel. Â© 2014 Marvel</footer>);\n};\n\nexport default Footer;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport \"./CharacterList.scss\"; \n\nclass CharacterList extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      characters: []\n    }\n  }\n\n  componentDidMount() {\n    this.fetchCharacters();\n  }\n\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.props.searchQuery !== prevProps.searchQuery) {\n      this.setState({\n      characters: []\n      }, this.fetchCharacters);\n    }\n  }\n\n  async fetchCharacters(){\n    try {\n      const charactersData = await axios.get(\"https://gateway.marvel.com/v1/public/characters\", {\n        params: {\n          apikey: \"c073ec6c21c6e6293fd4ac1e6d01968a\", // Use your API key here\n          limit: 50,\n          nameStartsWith: this.props.searchQuery ? this.props.searchQuery : null\n        }\n      });\n\n      this.setState({ \n        characters: charactersData.data.data.results\n      });\n    } catch (error) {\n      console.log(error.message);\n      // Add any error handling logic in here \n    } \n  }\n\n  renderCharacters() {\n    const characterList = this.state.characters.map((character, index) => {\n      return (<div\n      \tclassName=\"character-card\"\n      \tkey={`${character.id}-${index}`}\n      \tonClick={() => this.props.onSelectedCharacterChange(character.id)} //look at On Filter Submit in FilterBar.js to see another way to write\n      \t>\n        <img alt=\"\" src={`${character.thumbnail.path}.${character.thumbnail.extension}`}/>\n        <p>{character.name}</p>\n      </div>);\n    });\n    return (<div className=\"character-list\">{characterList}</div>);\n  }\n\n  renderEmptyState() {\n    return (<div>\n      <p>Loading characters....</p>\n    </div>);\n  }\n\n  render() {\n  \treturn (\n      <section className=\"CharacterList__Component\">\n    \t\t<h2>Characters List</h2>\n        {this.state.characters.length ? this.renderCharacters() : this.renderEmptyState()}\n    \t</section>\n    );\n  }\n};\n\nexport default CharacterList;\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport \"./CharacterDetail.scss\"; \n\nclass CharacterDetail extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedCharacter: null\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.props.selectedCharacterId && this.props.selectedCharacterId !== prevProps.selectedCharacterId) {\n      this.fetchCharacterDetails();\n    }\n  }\n\n    async fetchCharacterDetails() {\n      try {\n        const character = await axios.get(`https://gateway.marvel.com/v1/public/characters/${this.props.selectedCharacterId}`, {\n          params: {\n            apikey: \"c073ec6c21c6e6293fd4ac1e6d01968a\"\n          }\n        });\n      console.log(character.data.data.results[0]);\n      this.setState({\n        selectedCharacter: character.data.data.results[0]\n      })\n      } catch (error) {\n        console.log(error.message);\n        // Add any error handling logic in here \n      } \n    }\n\n  renderCharacterDetails() {\n      const { selectedCharacter } = this.state;\n      const wikiUrl = selectedCharacter.urls.find(url => url.type === \"wiki\"); \n\n      return (<div className=\"character-details\">\n        <img alt=\"\" src={`${selectedCharacter.thumbnail.path}.${selectedCharacter.thumbnail.extension}`}/>\n        <h4>{selectedCharacter.name}</h4>\n        <p>{selectedCharacter.description || \"No description found\"}</p> \n        { wikiUrl && \n          <a href={wikiUrl.url} target=\"_blank\" rel=\"noopener noreferrer\">Get more info</a>\n        }\n      </div>);\n  }\n\n  renderEmptyState() {\n    return (<div><p>Select a character from the list above</p></div>);\n  }\n\n\n  render() {\n    return (<section className=\"CharacterDetail__Component\">\n        <h2>Character Details</h2>\n        {this.state.selectedCharacter ? this.renderCharacterDetails() : this.renderEmptyState()}\n      </section>);\n  }\n};\n\nexport default CharacterDetail;","import React, { Component } from 'react';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport CharacterList from './components/CharacterList';\nimport CharacterDetail from './components/CharacterDetail'\nimport './App.scss';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  onFilterSubmit = (searchQuery) => {\n    this.setState({\n      searchQuery: searchQuery,\n      selectedCharacterId: null\n    });\n  }\n\n  onSelectedCharacterChange = (charId) => {\n    this.setState({\n      selectedCharacterId: charId\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App__Component\">\n        <Header \n          title=\"Marvel Comic Explorer\"\n          message=\"Search and explore your favourite Marvel characters!\"\n          onFilterSubmit={this.onFilterSubmit}\n        />\n        <CharacterList \n          searchQuery={this.state.searchQuery}\n          onSelectedCharacterChange={this.onSelectedCharacterChange}\n        />\n        <CharacterDetail \n          selectedCharacterId={this.state.selectedCharacterId}\n        />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}